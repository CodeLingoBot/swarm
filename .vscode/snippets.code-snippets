{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Test": {
		"scope": "go",
		"prefix": "test",
		"body": [
			"func Test${1:Name}(t *testing.T) {",
			"\tvalue := $0",
			"\tassert.Equal(t, , value)",
			"}"
		]
	},
	"Test cases": {
		"scope": "go",
		"prefix": "testtc",
		"body": [
			"func Test${1:Name}(t *testing.T) {",
			"\tcases := map[string]struct{",
			"\t\t${2:field1} string",
			"\t\t${3:field2} string",
			"\t\texpected string",
			"\t}{",
			"\t\t$2: \"\",",
			"\t\t$3: \"\",",
			"\t\texpected: \"\",",
			"\t}",
			"\tfor name, tc := range cases {",
			"\t\tt.Run(name, func(t *testing.T) {",
			"\t\t\t$0",
			"\t\t\tassert.Equal(t, expected , value)",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"Assert": {
		"scope": "go",
		"prefix": "ass",
		"body": [
			"assert.${1:Kind}(t, $0)"
		]
	},
	"Assert Nil": {
		"scope": "go",
		"prefix": "assnil",
		"body": [
			"assert.Nil(t, ${1:err})$0"
		]
	}
}